sender:
import socket
import threading

# List to hold all connected client sockets
clients = []

def handle_client(client_socket, client_address):
    """Handles communication with a single client."""
    print(f"[NEW CONNECTION] {client_address} connected.")
    clients.append(client_socket)

    try:
        while True:
            # Receive a message from the client
            message = client_socket.recv(1024)
            if not message:
                break  # Client disconnected

            # Print the message and broadcast it to all other clients
            print(f"[{client_address}] {message.decode()}")
            broadcast(message, client_socket)
    finally:
        # Remove and close client connection on disconnect
        clients.remove(client_socket)
        client_socket.close()
        print(f"[DISCONNECTED] {client_address} disconnected.")

def broadcast(message, sender_socket=None):
    """Broadcasts a message to all clients except the sender."""
    for client in clients:
        if client != sender_socket:
            try:
                client.send(message)
            except Exception:
                clients.remove(client)
                client.close()

def server_send_messages():
    """Takes input from the server and broadcasts to all clients."""
    while True:
        message = input()
        broadcast(f"[SERVER]: {message}".encode())

def start_server():
    server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    server_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
    server_socket.bind(('localhost', 12345))
    server_socket.listen()
    print("[SERVER STARTED] Listening for connections...")

    # Start a thread for server input
    server_input_thread = threading.Thread(target=server_send_messages)
    server_input_thread.daemon = True
    server_input_thread.start()

    # Main loop to accept and handle client connections
    while True:
        client_socket, client_address = server_socket.accept()
        client_thread = threading.Thread(target=handle_client, args=(client_socket, client_address))
        client_thread.start()

start_server()
receiver:
import socket
import threading

def receive_messages(client_socket):
    """Continuously listens for incoming messages from the server."""
    while True:
        try:
            message = client_socket.recv(1024).decode()
            if message:
                print(message)
            else:
                break
        except Exception:
            print("[ERROR] Lost connection to the server.")
            break

def start_client():
    client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    client_socket.connect(('localhost', 12345))
    print("[CONNECTED] Connected to the chat server.")

    username = input("Enter your username: ")
    client_socket.send(f"{username} has joined the chat.".encode())

    # Start a thread to listen for messages from the server
    receive_thread = threading.Thread(target=receive_messages, args=(client_socket,))
    receive_thread.daemon = True
    receive_thread.start()

    # Main loop for sending messages
    try:
        while True:
            message = input()
            if message.lower() == 'quit':
                client_socket.send(f"{username} has left the chat.".encode())
                break
            client_socket.send(f"{username}: {message}".encode())
    finally:
        client_socket.close()
        print("[DISCONNECTED] You left the chat.")

start_client()
